{"version":3,"sources":["components/Header.jsx","contexts/CategoriesContext.jsx","contexts/CocktailsContext.jsx","components/SearchForm.jsx","components/Recipe.jsx","hooks/useRecipeInfo.jsx","components/CocktailList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","className","CategoriesContext","createContext","CategoriesProvider","children","useState","categories","setCategories","useEffect","axios","get","then","r","data","drinks","map","c","strCategory","sort","catch","err","console","error","Provider","value","CocktailsContext","CocktailsProvider","cocktails","setCocktails","ingredient","category","search","searchCocktails","formData","FormData","append","URLSearchParams","SearchForm","useContext","setFormData","updateFormData","key","onSubmit","e","preventDefault","name","type","placeholder","onChange","target","cat","i","Recipe","cocktail","modalOpen","setModalOpen","strDrink","src","strDrinkThumb","alt","onClick","RecipeModal","open","cocktailId","idDrink","onClose","recipeInfo","recipeId","setRecipeInfo","useRecipeInfo","getModalStyle","modalStyle","classes","useStyles","Modal","paper","style","strInstructions","ingredients","push","measure","getIngredientList","top","left","transform","makeStyles","theme","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","CocktailList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da442721.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"bg-alert\">\r\n      <h1>Cocktail master</h1>\r\n    </header>\r\n  );\r\n}\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const CategoriesContext = createContext();\r\n\r\nexport default function CategoriesProvider({ children }) {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://thecocktaildb.com/api/json/v1/1/list.php?c=list\")\r\n      .then((r) =>\r\n        setCategories(r.data.drinks.map((c) => c.strCategory).sort())\r\n      )\r\n      .catch((err) => console.error(err));\r\n  }, []);\r\n\r\n  return (\r\n    <CategoriesContext.Provider value={{ categories }}>\r\n      {children}\r\n    </CategoriesContext.Provider>\r\n  );\r\n}\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const CocktailsContext = createContext();\r\n\r\nexport default function CocktailsProvider({ children }) {\r\n  const [cocktails, setCocktails] = useState([]);\r\n  const [search, searchCocktails] = useState({\r\n    ingredient: \"\",\r\n    category: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!search.ingredient || !search.category) return;\r\n\r\n    let formData = new FormData();\r\n    formData.append('i', search.ingredient);\r\n    formData.append('c', search.category);\r\n\r\n    axios\r\n      .get(\r\n        \"https://thecocktaildb.com/api/json/v1/1/filter.php?\" +\r\n        new URLSearchParams(formData)\r\n      )\r\n      .then((r) => setCocktails(r.data.drinks))\r\n      .catch((err) => console.err(err));\r\n  }, [search]);\r\n\r\n  return (\r\n    <CocktailsContext.Provider value={{ cocktails, searchCocktails }}>\r\n      {children}\r\n    </CocktailsContext.Provider>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { CategoriesContext } from \"../contexts/CategoriesContext\";\r\nimport { CocktailsContext } from \"../contexts/CocktailsContext\";\r\n\r\nexport default function SearchForm() {\r\n  const { categories } = useContext(CategoriesContext);\r\n  const { searchCocktails } = useContext(CocktailsContext);\r\n  const [formData, setFormData] = useState({ ingredient: \"\", category: \"\" });\r\n\r\n  function updateFormData(key, value) {\r\n    setFormData({ ...formData, [key]: value });\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className=\"col-12\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        searchCocktails(formData);\r\n      }}\r\n    >\r\n      <fieldset className=\"text-center\">\r\n        <legend>Search recipes for different cocktails</legend>\r\n      </fieldset>\r\n      <div className=\"row mt-4\">\r\n        <div className=\"col-md-4\">\r\n          <input\r\n            name=\"ingredient\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search by ingredient\"\r\n            onChange={(e) => updateFormData(e.target.name, e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <select\r\n            name=\"category\"\r\n            className=\"form-control\"\r\n            onChange={(e) => updateFormData(e.target.name, e.target.value)}\r\n          >\r\n            <option value=\"\">- Select category -</option>\r\n            {categories.map((cat, i) => (\r\n              <option key={i}>{cat}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <input\r\n            className=\"btn btn-block btn-primary\"\r\n            value=\"Search\"\r\n            type=\"submit\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport useRecipeInfo from \"../hooks/useRecipeInfo\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default function Recipe({ cocktail }) {\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"col-md-4 mb-3\">\r\n      <div className=\"card\">\r\n        <h2 className=\"card-header\">{cocktail.strDrink}</h2>\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={cocktail.strDrinkThumb}\r\n          alt={cocktail.strDrink}\r\n        />\r\n\r\n        <div className=\"card-body\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-block btn-primary\"\r\n            onClick={() => setModalOpen(true)}\r\n          >\r\n            View recipe\r\n          </button>\r\n          <RecipeModal\r\n            open={modalOpen}\r\n            cocktailId={cocktail.idDrink}\r\n            onClose={() => setModalOpen(false)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RecipeModal({open, onClose, cocktailId}) {\r\n\r\n  const recipeInfo = useRecipeInfo(cocktailId);\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Modal open={open} onClose={onClose}>\r\n      <div className={classes.paper} style={modalStyle}>\r\n        <h2>{recipeInfo.strDrink}</h2>\r\n        <h3 className=\"mt-4\">Instructions</h3>\r\n        <p>{recipeInfo.strInstructions}</p>\r\n        <img\r\n          className=\"img-fluid my-4\"\r\n          src={recipeInfo.strDrinkThumb}\r\n          alt={`Imagen de ${recipeInfo.strDrink}`}\r\n        />\r\n        <h3>Ingredients</h3>\r\n        <ul>\r\n          {getIngredientList(recipeInfo).map((ingredient, i) => (\r\n            <li key={i}>\r\n              {`${ingredient.ingredient} ${ingredient.measure}`}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction getIngredientList(recipeInfo) {\r\n\r\n  let ingredients = [];\r\n  for (let i = 1; i <= 15; i++) {\r\n    if (!recipeInfo[`strIngredient${i}`])\r\n      break;\r\n\r\n    ingredients.push({\r\n      ingredient: recipeInfo[`strIngredient${i}`],\r\n      measure: recipeInfo[`strMeasure${i}`]\r\n    });\r\n  }\r\n\r\n  return ingredients;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 450,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function useRecipeInfo(recipeId) {\r\n\r\n  const [recipeInfo, setRecipeInfo] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (recipeId == null) return;\r\n\r\n    axios\r\n      .get(`https://thecocktaildb.com/api/json/v1/1/lookup.php?i=${recipeId}`)\r\n      .then(r => setRecipeInfo(r.data.drinks[0]))\r\n\r\n  }, [recipeId]);\r\n\r\n  return recipeInfo;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { CocktailsContext } from \"../contexts/CocktailsContext\";\r\nimport Recipe from \"../components/Recipe\";\r\n\r\nexport default function CocktailList() {\r\n\r\n  const { cocktails } = useContext(CocktailsContext);\r\n\r\n  return (\r\n    <div className=\"row mt-5\">\r\n      {cocktails.map((cocktail) => (\r\n        <Recipe key={cocktail.idDrink} cocktail={cocktail} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport CategoriesProvider from \"./contexts/CategoriesContext\";\nimport CocktailsProvider from \"./contexts/CocktailsContext\";\nimport SearchForm from \"./components/SearchForm\";\nimport CocktailList from \"./components/CocktailList\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  return (\n    <CategoriesProvider>\n      <CocktailsProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <SearchForm />\n            <CocktailList />\n          </div>\n      </CocktailsProvider>\n    </CategoriesProvider>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './bootstrap.min.css';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}